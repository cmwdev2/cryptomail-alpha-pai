// Copyright (c) 2021, Cmail Authors. subnetter@proto.me.
// This work is licensed under the Cmail Alpha v0.1.0 license published in the LICENSE file of this repo.
//

syntax = "proto3";
package types;
import "types/types.proto";

// A message has 2 parts - author data and server data. Each part is signed by its creator
message Message {
    MessageId message_id = 1;
    bytes author_data = 2; // serialized MessageUserdata
    MessageServerData server_data = 3;
    bytes signature = 4; // author signature on author_data MessageUserData
}

// Message parts that are authored and signed by user and not generated on the server
message MessageUserdata {
    MessageId message_id = 1;
    types.PublicKey sender_public_key = 2; // sender public key, used to verify signature and to use public account info
    uint64 created = 3; // timestamp - epoch time nanos
    Payment payment = 4; // when author created a payment transaction for this message
    bytes reply_to = 5; // thread message id this is a reply to
    types.PublicKey recipient_public_key = 6;
    PublicKey eph_pub_key = 7; // pub ephemeral key created by author, used for decryption of content. Note that this is a x25519_dalek::PublicKey wrapper and not ed25519_dalek::PublicKey
    uint32 recipient_pre_key_id = 8; // the id of the recipient's public pre-key used to encrypt this message
    bytes content = 9; // encrypted MessageContent with recipient pub key and sender pub key for DH to obtain aes key
}

// Wrapper of a list of MessageIds
message MessagesIds {
    repeated MessageId messages_ids = 1;
}

message MessageKey {
    MessageId id = 1;
    bytes key = 2;
}

// A collection of MessageKey(s)
message MessageKeys {
   repeated MessageKey message_keys = 1;
}

// Message parts that are generated by the service and not by the author
message MessageServerData {
    bool opened = 1;  // recipient opened the message
    bool replied = 2; // recipient replied to the message
    DepositData deposit_data = 3;
    bytes signature = 4; // server signature
}

message DepositData {
    uint64 verify_attempts = 1; // number of deposit confirm attempts
    uint64 last_verify_attempt = 2; // timestamp of last deposit confirmation attempt
    DepositConfirmation deposit_confirmation = 3; // for a paid message, deposit smart contract info or empty if none available yet
}

message Thread {
    bytes id = 1; // thread ids are unique 8 bytes across whole namespace - created with first message
    repeated bytes msgs_ids = 2; // A thread is a collection of 1 or more messages, ordered by creation time. Message thread id is 8 bytes
}

enum ThreadBoxType {
    THREAD_BOX_TYPE_UNKNOWN = 0;
    THREAD_BOX_TYPE_INBOX = 1;
    THREAD_BOX_TYPE_SENT = 2;
    THREAD_BOX_TYPE_ARCHIVE = 4;
}

message ThreadBox {
    ThreadBoxType thread_box_type = 1;
    repeated bytes thread_ids = 2; // ordered list of threads
}

// MessageContent is an ordered collection of Content items
message MessageContent {
    ContentItem subject = 1; // subject is utf-8 string
    ContentItem body = 2; // body is utf-8 string of md text to be rendered (including links)
    repeated ContentItem media_items = 3; // zero or more additional media items
}

// Content represents an individual content item such text or image.
message ContentItem {
    MimeType mime_type = 1; // data encoding. eg. text/utf-8, image/gif
    Compression compression = 2; // optional compression done on data field. e.g. deflate/zip
    bytes data = 3; // data. e.g. utf-8 string, png, gif or jpeg
}
